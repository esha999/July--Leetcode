class Solution {
public:
    int n, m;
    bool exist(vector<vector<char>>& board, string word) 
    {
        n = board.size();
		m = board[0].size();
		for(int i = 0;i<n;i++) {
			for(int j = 0;j<m;j++) {
				bool ans = dfs(board, word, i,j, 0);
				if(ans)return true;
			}
		}
	    return false;
    }
	bool dfs(vector<vector<char>>& board, string word, int i, int j, int k) {
		if(i<0 || i>=n || j < 0 || j>=m || board[i][j] == ' ' || word[k] != board[i][j])return false;
        if(k == word.size() - 1)return true;
		char c = board[i][j];
		board[i][j] = ' ';
		bool res = false;
		res = res || dfs(board, word, i + 1, j, k + 1);
		res = res || dfs(board, word, i, j+ 1, k + 1);
		res = res || dfs(board, word, i - 1, j, k + 1);
		res = res || dfs(board, word, i, j - 1,  k + 1);
        board[i][j] = c;
		return res;
    }
};
